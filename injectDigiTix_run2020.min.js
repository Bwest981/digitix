//Run for the Unicorns
var tokenABI = [
	{
		"constant": false,
		"inputs": [
			{
				"name": "_spender",
				"type": "address"
			},
			{
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_spender",
				"type": "address"
			},
			{
				"name": "_subtractedValue",
				"type": "uint256"
			}
		],
		"name": "decreaseApproval",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_spender",
				"type": "address"
			},
			{
				"name": "_addedValue",
				"type": "uint256"
			}
		],
		"name": "increaseApproval",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_to",
				"type": "address"
			},
			{
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "transfer",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_from",
				"type": "address"
			},
			{
				"name": "_to",
				"type": "address"
			},
			{
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "spender",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_owner",
				"type": "address"
			},
			{
				"name": "_spender",
				"type": "address"
			}
		],
		"name": "allowance",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_owner",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"name": "balance",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "decimals",
		"outputs": [
			{
				"name": "",
				"type": "uint8"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "INITIAL_SUPPLY",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "totalSupply",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
]
var contractABI = [
	{
		"constant": true,
		"inputs": [],
		"name": "getTicketsPerUser",
		"outputs": [
			{
				"name": "",
				"type": "uint256[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "events",
		"outputs": [
			{
				"name": "dateOfEvent",
				"type": "uint256"
			},
			{
				"name": "randomEventID",
				"type": "uint256"
			},
			{
				"name": "totalTicketQty",
				"type": "uint32"
			},
			{
				"name": "ticketBalance",
				"type": "uint32"
			},
			{
				"name": "ticketsUsed",
				"type": "uint32"
			},
			{
				"name": "eventName",
				"type": "string"
			},
			{
				"name": "eventAddress",
				"type": "string"
			},
			{
				"name": "eventVenue",
				"type": "string"
			},
			{
				"name": "eventOwner",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"name": "ownerUsableTicketCount",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_setTokenHolderCreateEventAmount",
				"type": "uint256"
			}
		],
		"name": "setTokenHolderCreateEventAmount",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [],
		"name": "withdrawEverythingToContractOwner",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_setEventFee",
				"type": "uint256"
			},
			{
				"name": "_setEventChangeFee",
				"type": "uint256"
			},
			{
				"name": "_setTicketTierFee",
				"type": "uint256"
			},
			{
				"name": "_setPurchaseTicketFee",
				"type": "uint256"
			}
		],
		"name": "setEtherFees",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_owner",
				"type": "address"
			},
			{
				"name": "_spender",
				"type": "address"
			}
		],
		"name": "tokenAllowance",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"name": "ownerEventCount",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_ticketId",
				"type": "uint256"
			}
		],
		"name": "getTicketDetails",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint16"
			},
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "checkUserTokenBalance",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "viewTokenHolderCreateEventAmount",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "ticketToOwner",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_eventName",
				"type": "string"
			},
			{
				"name": "_eventAddress",
				"type": "string"
			},
			{
				"name": "_eventVenue",
				"type": "string"
			},
			{
				"name": "_dateOfEvent",
				"type": "uint256"
			},
			{
				"name": "_ticketQty",
				"type": "uint32"
			},
			{
				"name": "_paymentWithToken",
				"type": "bool"
			}
		],
		"name": "createEvent",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "decimals",
		"outputs": [
			{
				"name": "",
				"type": "uint8"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "uriToTicketTier",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "eventToOwner",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_eventID",
				"type": "uint256"
			}
		],
		"name": "withdrawEventOwner",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"name": "ownerTicketCount",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_eventID",
				"type": "uint256"
			}
		],
		"name": "getEventScanners",
		"outputs": [
			{
				"name": "",
				"type": "address[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_eventID",
				"type": "uint256"
			}
		],
		"name": "takeEventOwnership",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_to",
				"type": "address"
			},
			{
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "tokenTransfer",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "ticketToTicketTier",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_eventID",
				"type": "uint256"
			},
			{
				"name": "_newEventDate",
				"type": "uint256"
			},
			{
				"name": "_newTicketQty",
				"type": "uint32"
			},
			{
				"name": "_newEventName",
				"type": "string"
			},
			{
				"name": "_newEventVenue",
				"type": "string"
			},
			{
				"name": "_newEventAddress",
				"type": "string"
			},
			{
				"name": "_paymentWithToken",
				"type": "bool"
			}
		],
		"name": "changeEventData",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "eventCount",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_eventID",
				"type": "uint256"
			},
			{
				"name": "_removeEventScanner",
				"type": "address"
			}
		],
		"name": "removeEventScanner",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_owner",
				"type": "address"
			}
		],
		"name": "getEventsByOwner",
		"outputs": [
			{
				"name": "",
				"type": "uint256[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_eventId",
				"type": "uint256"
			},
			{
				"name": "_ticketId",
				"type": "uint256"
			}
		],
		"name": "getTicketDetailsForScanning",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint16"
			},
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_owner",
				"type": "address"
			}
		],
		"name": "getTicketTiersToOwner",
		"outputs": [
			{
				"name": "",
				"type": "uint256[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_eventId",
				"type": "uint256"
			},
			{
				"name": "_ticketTierId",
				"type": "uint256"
			},
			{
				"name": "_ticketQty",
				"type": "uint32"
			},
			{
				"name": "_paymentWithToken",
				"type": "bool"
			}
		],
		"name": "purchaseTicket",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "viewMinterContractAddress",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_eventID",
				"type": "uint256"
			},
			{
				"name": "_ticketEthCost",
				"type": "uint256"
			},
			{
				"name": "_ticketTokenCost",
				"type": "uint256"
			},
			{
				"name": "_ticketQtyInTier",
				"type": "uint32"
			},
			{
				"name": "_ticketTierName",
				"type": "string"
			},
			{
				"name": "_paymentWithToken",
				"type": "bool"
			}
		],
		"name": "createEventTier",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_eventId",
				"type": "uint256"
			},
			{
				"name": "_ticketTierId",
				"type": "uint256"
			},
			{
				"name": "_ticketQty",
				"type": "uint32"
			},
			{
				"name": "_paymentWithToken",
				"type": "bool"
			}
		],
		"name": "eventOwnerIssueTicket",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "ticketTiers",
		"outputs": [
			{
				"name": "eventID",
				"type": "uint256"
			},
			{
				"name": "ticketCostInEth",
				"type": "uint256"
			},
			{
				"name": "ethBalanceInTier",
				"type": "uint256"
			},
			{
				"name": "ticketCostInTokens",
				"type": "uint256"
			},
			{
				"name": "tokenBalanceInTier",
				"type": "uint256"
			},
			{
				"name": "ticketQtyInTier",
				"type": "uint32"
			},
			{
				"name": "ticketsInTierUsed",
				"type": "uint32"
			},
			{
				"name": "ticketsSold",
				"type": "uint32"
			},
			{
				"name": "ticketTierName",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_from",
				"type": "address"
			},
			{
				"name": "_to",
				"type": "address"
			},
			{
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "tokenTransferFrom",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "viewTokenFees",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_eventID",
				"type": "uint256"
			},
			{
				"name": "_newEventScanner",
				"type": "address"
			}
		],
		"name": "addEventScanner",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_eventID",
				"type": "uint256"
			},
			{
				"name": "_newOwnerAddress",
				"type": "address"
			},
			{
				"name": "_paymentWithToken",
				"type": "bool"
			}
		],
		"name": "transferEventOwnership",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "viewEtherFees",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_newMinterAddress",
				"type": "address"
			}
		],
		"name": "setMinterContractAddress",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_newTokenAddress",
				"type": "address"
			}
		],
		"name": "setTokenContractAddress",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "viewDiscountLevels",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint16"
			},
			{
				"name": "",
				"type": "uint16"
			},
			{
				"name": "",
				"type": "uint16"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_ticketId",
				"type": "uint256"
			},
			{
				"name": "_eventId",
				"type": "uint256"
			},
			{
				"name": "_randId",
				"type": "uint256"
			}
		],
		"name": "useTicket",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "viewTokenContractAddress",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_ticketId",
				"type": "uint256"
			},
			{
				"name": "_eventId",
				"type": "uint256"
			}
		],
		"name": "userScanTicket",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			},
			{
				"name": "",
				"type": "string"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_setFirstDiscountLevel",
				"type": "uint256"
			},
			{
				"name": "_setSecondDiscountLevel",
				"type": "uint256"
			},
			{
				"name": "_setThirdDiscountLevel",
				"type": "uint256"
			},
			{
				"name": "_setFirstDiscount",
				"type": "uint16"
			},
			{
				"name": "_setSecondDiscount",
				"type": "uint16"
			},
			{
				"name": "_setThirdDiscount",
				"type": "uint16"
			}
		],
		"name": "setDiscountLevels",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "ticketTierToOwner",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_ticketId",
				"type": "uint256"
			}
		],
		"name": "callTicketsOnlyOwner",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_eventID",
				"type": "uint256"
			}
		],
		"name": "eventOwnerTicketBalanceTierCreation",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_ticketTierId",
				"type": "uint256"
			}
		],
		"name": "eventTicketBalanceTier",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [],
		"name": "withdrawCollectedFeesToContractOwner",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_from",
				"type": "address"
			},
			{
				"name": "_to",
				"type": "address"
			},
			{
				"name": "_ticketId",
				"type": "uint256"
			}
		],
		"name": "updateTicket",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "ticketTierToEvent",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "balanceOfContract",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_eventId",
				"type": "uint256"
			}
		],
		"name": "viewEventTotalBalance",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_eventID",
				"type": "uint256"
			},
			{
				"name": "_ticketTierId",
				"type": "uint256"
			},
			{
				"name": "_newTicketCostInEth",
				"type": "uint32"
			},
			{
				"name": "_newTicketCostInTokens",
				"type": "uint32"
			},
			{
				"name": "_newTicketQtyInTier",
				"type": "uint32"
			},
			{
				"name": "_newTicketTierName",
				"type": "string"
			},
			{
				"name": "_paymentWithToken",
				"type": "bool"
			}
		],
		"name": "changeTierData",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"name": "ownerTicketTierCount",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_setEventFee",
				"type": "uint32"
			},
			{
				"name": "_setEventChangeFee",
				"type": "uint32"
			},
			{
				"name": "_setTicketTierFee",
				"type": "uint32"
			},
			{
				"name": "_setPurchaseTicketFee",
				"type": "uint32"
			}
		],
		"name": "setTokenFees",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "checkContractTokenBalance",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_eventID",
				"type": "uint256"
			}
		],
		"name": "getTicketTiersToEvent",
		"outputs": [
			{
				"name": "",
				"type": "uint256[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_newOwner",
				"type": "address"
			}
		],
		"name": "transferOwnership",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "eventTicketTierCount",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_ticketId",
				"type": "uint256"
			},
			{
				"name": "_eventId",
				"type": "uint256"
			}
		],
		"name": "restoreTicketStatus",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_newURI",
				"type": "string"
			},
			{
				"name": "_eventID",
				"type": "uint256"
			},
			{
				"name": "_ticketTierId",
				"type": "uint256"
			}
		],
		"name": "addUri",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "eventID",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "ticketTierId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "ticketId",
				"type": "uint256"
			}
		],
		"name": "NewTicket",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "eventID",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "ticketTierId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "ticketQtyInTier",
				"type": "uint32"
			},
			{
				"indexed": false,
				"name": "ticketCostInEth",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "ticketCostInTokens",
				"type": "uint256"
			}
		],
		"name": "NewTicketTier",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "eventID",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "eventName",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "dateOfEvent",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "randomEventID",
				"type": "uint256"
			}
		],
		"name": "NewEvent",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "previousOwner",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "OwnershipTransferred",
		"type": "event"
	}
]
var minterABI = [
	{
		"constant": true,
		"inputs": [
			{
				"name": "interfaceId",
				"type": "bytes4"
			}
		],
		"name": "supportsInterface",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_tokenId",
				"type": "uint256"
			}
		],
		"name": "getApproved",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_to",
				"type": "address"
			},
			{
				"name": "_tokenId",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "totalSupply",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "from",
				"type": "address"
			},
			{
				"name": "_to",
				"type": "address"
			},
			{
				"name": "_tokenId",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "from",
				"type": "address"
			},
			{
				"name": "_to",
				"type": "address"
			},
			{
				"name": "_tokenId",
				"type": "uint256"
			}
		],
		"name": "safeTransferFrom",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "viewDigiTixContractAddress",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_receiver",
				"type": "address"
			},
			{
				"name": "_tokenId",
				"type": "uint256"
			},
			{
				"name": "_uri",
				"type": "string"
			}
		],
		"name": "mintWithTokenURI",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_tokenId",
				"type": "uint256"
			}
		],
		"name": "ownerOf",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_owner",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_to",
				"type": "address"
			},
			{
				"name": "_approved",
				"type": "bool"
			}
		],
		"name": "setApprovalForAll",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_newDigiTixAddress",
				"type": "address"
			}
		],
		"name": "setDigiTixContractAddress",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_newOwner",
				"type": "address"
			}
		],
		"name": "transferOwnershipOfMinter",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "from",
				"type": "address"
			},
			{
				"name": "to",
				"type": "address"
			},
			{
				"name": "tokenId",
				"type": "uint256"
			},
			{
				"name": "_data",
				"type": "bytes"
			}
		],
		"name": "safeTransferFrom",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_tokenId",
				"type": "uint256"
			}
		],
		"name": "tokenURI",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_owner",
				"type": "address"
			},
			{
				"name": "_operator",
				"type": "address"
			}
		],
		"name": "isApprovedForAll",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "previousOwner",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "OwnershipTransferred",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "to",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "approved",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "operator",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "ApprovalForAll",
		"type": "event"
	}
]

var userAccount;
var ticketContract;
var contractAddress ="0x866d6bc1ce47116e0296a441c59132ec3d5df71c"; // Rinkeby
var tokenContractAddress = "0x3c766a376f88e689e85a87efbb4165f14ef51832"; //Rinkeby
var minterContractAddress = "0x7514d7E6EaB9e4062F0c43Fc9684A40BBC683A80"; //Rinkeby

//var minterContractAddress = "0x2160DB36aA3bbfc4dB8dA01cB49d793a49527430"; //Rinkeby old?

//mainnet with 8 decimals => Droid
// var contractAddress ="0xae28f8c263e23da9d4849d4a379ed240def6e2fa"; // Mainnet
// var tokenContractAddress = "0x966889549FE7B3B950063151F6E2aD7651BEcDB9"; // Mainnet
// var minterContractAddress = "0x0843a4c4f1ad0b929a07a99c4ce8fbf3dd9d6eed"; // Mainnet

/*
"Run For The Unicorns 2020","200 E Brandeis Ave, Louisville, KY 40208","University Club, University of Louisville","20200928","10000", false

Create Event tier
EventID, TicketEthCost, TicketTokenCost, TicketQtInTier, PaymentWithToken
7,0,2500000000000000000000,1000, "Run 2020 - Virtual Conference", false


1,0,150000000000,1000, "Run 2020 - Virtual Conference", false
1,0,895000000000,1000, "Run 2020 - Conference Pass Only", false
1,0,4895000000000,1000, "Run 2020 - VIP Full Conference Pass", false


Purchase Ticket
EventId, TicketTierId, TicketQty, PaymentWithtoken
1,14,1,true
1,15,1,true
1,16,1,true

"Run 2020 - Virtual Conference"
"Run 2020 - Conference Pass Only"
"Run 2020 - VIP Full Conference Pass"
*/


var tokenContract = web3.eth.contract(tokenABI).at(tokenContractAddress);
var minterContract = web3.eth.contract(minterABI).at(minterContractAddress);
var ticketContract = web3.eth.contract(contractABI).at(contractAddress);

var unicorns = {
0:["http://www.runfortheunicorns.com/wp-content/uploads/2019/04/rftu-02-360px.gif","Run 2020 - Virtual Conference", "2500"],
1:["http://www.runfortheunicorns.com/wp-content/uploads/2019/04/rftu-05-360px.gif","Run 2020 - Conference Pass Only","9950"],
2:["http://www.runfortheunicorns.com/wp-content/uploads/2019/04/rftu-03-360px.gif","Run 2020 - VIP Full Conference Pass","49950"],
3:["http://www.runfortheunicorns.com/wp-content/uploads/2019/04/rftu-02-360px.gif","Run 2020 - Virtual Conference", "2500"],
4:["http://www.runfortheunicorns.com/wp-content/uploads/2019/04/rftu-05-360px.gif","Run 2020 - Conference Pass Only","9950"],
5:["http://www.runfortheunicorns.com/wp-content/uploads/2019/04/rftu-03-360px.gif","Run 2020 - VIP Full Conference Pass","49950"],
6:["http://www.runfortheunicorns.com/wp-content/uploads/2019/04/rftu-02-360px.gif","Run 2020 - Virtual Conference", "2500"],
7:["http://www.runfortheunicorns.com/wp-content/uploads/2019/04/rftu-05-360px.gif","Run 2020 - Conference Pass Only","9950"],
8:["http://www.runfortheunicorns.com/wp-content/uploads/2019/04/rftu-03-360px.gif","Run 2020 - VIP Full Conference Pass","49950"],
9:["http://www.runfortheunicorns.com/wp-content/uploads/2019/04/rftu-02-360px.gif","Run 2020 - Virtual Conference", "2500"],
10:["http://www.runfortheunicorns.com/wp-content/uploads/2019/04/rftu-05-360px.gif","Run 2020 - Conference Pass Only","9950"],
11:["http://www.runfortheunicorns.com/wp-content/uploads/2019/04/rftu-03-360px.gif","Run 2020 - VIP Full Conference Pass","49950"],
12:["http://www.runfortheunicorns.com/wp-content/uploads/2019/04/rftu-02-360px.gif","Run 2020 - Virtual Conference", "2500"],
13:["http://www.runfortheunicorns.com/wp-content/uploads/2019/04/rftu-05-360px.gif","Run 2020 - Conference Pass Only","9950"],
14:["http://www.runfortheunicorns.com/wp-content/uploads/2020/08/rftu-2020-virtual-320px.gif","Run 2020 - Virtual Conference", "2500"],
15:["http://www.runfortheunicorns.com/wp-content/uploads/2020/08/rftu-2020-pass-320px.gif","Run 2020 - Conference Pass Only","9950"],
16:["http://www.runfortheunicorns.com/wp-content/uploads/2020/08/rftu-2020-vip-320px.gif","Run 2020 - VIP Full Conference Pass","49950"]
};

const promisify = (inner) =>
    new Promise((resolve, reject) =>
        inner((err, res) => {
            if (err) {
                reject(err);
            } else {
                resolve(res);
            }
        })
    );

function startApp() {
	console.log("Ticket Address: "+ contractAddress);
	ticketContract = web3.eth.contract(contractABI).at(contractAddress);
	console.log(ticketContract);
	var accountInterval = setInterval(async function() {
		// Check if account has changed
		if (web3.eth.accounts[0] !== userAccount) {
			userAccount = web3.eth.accounts[0];
    }
    //var erc20Approved = await tokenContract.allowance(userAccount,contractAddress).call() / Math.pow(10,18);
    await promisify(cb => tokenContract.allowance(userAccount,contractAddress,cb))
    .then(function (result){
      console.log(result);
      if(result > 0){
        document.getElementById('tokensApproved').checked = true;

      } else{
        document.getElementById('tokensApproved').checked = false;
      }
    })


	}, 5000);
}

//Email Inject
(function(){
	 emailjs.init("user_PTEqrzQhNJeHlaFAPNTRD");
})();
//Buy Ticket Functions
(function() {
'use strict';
	window.addEventListener('load', function() {
		connectM();
		// Fetch all the forms we want to apply custom Bootstrap validation styles to
		var forms = document.getElementsByClassName('needs-validation');
		// Loop over them and prevent submission
		var validation = Array.prototype.filter.call(forms, function(form) {
			form.addEventListener('submit', function(event) {
				if (form.checkValidity() === false) {
					event.preventDefault();
					event.stopPropagation();
					alert("Please make sure all required forms are filled out.");
				}
					form.classList.add('was-validated');
				if (form.checkValidity() === true){
					var parseVal = this.ticketPurchase.value.split(',');
					console.log(parseVal[0],parseVal[1],parseVal[2]);
					console.log(event);
					console.log(this);
					event.preventDefault();
					purchaseTicket(parseVal[0],parseVal[1],parseVal[2],this)
					.then(function (txHash){
						//console.log("Transaction Hash: " + txHash);
					})
					.catch(console.error);
					console.log("JUMP!");
					//event.preventDefault();
					//this.contact_number.value = Math.random() * 100000 | 0;
					//emailjs.sendForm('mailgunDigiTix', 'digitix', this);
				}
			}, false);
		});
	}, false);
})();
async function purchaseTicketOld(eventId, ticketTierId, ticketCost,that){
	launchProgressBar();
	console.log("Purchase Ticket");
	console.log(eventId, ticketTierId, ticketCost);
	console.log("purchaseTicket" + eventId + ticketTierId);
	that.img_string.value = unicorns[ticketTierId][0];
	that.ticket_name.value = unicorns[ticketTierId][1];
	console.log("Give me the string: " + unicorns[ticketTierId]);
	// var purchaseTicketQty = document.getElementById("purchaseTicket" + eventId + ticketTierId).value;
	// if (purchaseTicketQty === ""){
	//   alert("Please input how many tickets you would like to purchase.");
	//   throw "No amount was input.";
	// }
	console.log("Purchase Ticket");
	//var purchaseTicketPayWithTokens = $('input[name="purchaseTicket-radio"]:checked').val();
	var purchaseTicketPayWithTokens = 1;
	console.log(purchaseTicketPayWithTokens);
	if(window.ethereum || window.web3){
		console.log("Passed.");
		if(purchaseTicketPayWithTokens == 0){
			purchaseTicketPayWithTokens = false;
			fee = await Promise.resolve(calculateFees("purchaseTicketFee",purchaseTicketPayWithTokens));
			fee = fee + ticketCost  * 1; //purchaseTicketQty;
			console.log(purchaseTicketPayWithTokens + " Fee: " + fee);
			ticketContract.purchaseTicket(eventId,ticketTierId,1, purchaseTicketPayWithTokens,{from: web3.eth.accounts[0], gas:400000, value:fee , gasPrice:60000000000},function(error, result){
				 if(!error){
					 console.log("Results: " + result);
				 } else
					console.error("Error: " + error);
				});
		} else if(purchaseTicketPayWithTokens == 1){

			//Token Payments Start Here
			purchaseTicketPayWithTokens = true;
      fee = await promisify(cb => ticketContract.viewTokenFees(cb));
      var decimals = await promisify(cb => tokenContract.decimals(cb));
      console.log("DECIMALS",decimals);
			console.log("FeePrice " + fee[0] + " TokenPrice " + ticketCost);
			var feeCost = fee[0]*1
			console.log("Fee Price: " + feeCost);
			tokenCost = (ticketCost * 1)*Math.pow(10, decimals);
			console.log("TokenPrice: " + tokenCost)
			tokenCost = await math.add(math.bignumber(feeCost), math.bignumber(tokenCost));
			console.log("FinalPrice: " + tokenCost);
			console.log("Call Approve");
			tokenCost = tokenCost *1;
			that.ticket_cost.value = Math.round(tokenCost / Math.pow(10, 8));
			await promisify(cb => tokenContract.approve(contractAddress,tokenCost,cb))
				.then(function (txHash) {
					console.log('Transaction sent');
					//console.dir(txHash);
					//console.log(that);
					document.getElementById('progress2').className = 'completed';
					document.getElementById('progress3').className = 'active';
					waitForReceipt(eventId,ticketTierId,1, purchaseTicketPayWithTokens,txHash,that);
				})
				.catch(console.error)
		} else if(purchaseTicketPayWithTokens == 2){
			$("#myModalLabel").empty();
			$("#modal-body").empty();
			$('#modal-footer').empty();
			$("#myModalLabel").html(
				"Purchase Tickets"
			);
			$("#modal-body").html(
				`test`
			);
			$('#modal-footer').html(
				'<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>'
			);
			$("#basicModal").modal("show");
		}
	} else {
		alert('Please connect to Metamask to purchase tickets with Ethereum.');
	}
}
function waitForReceipt(eventId,ticketTierId,purchaseTicketQty, purchaseTicketPayWithTokens,hash,that,cb) {
  var approveEvent = tokenContract.Approval({from: userAccount});
  //console.log(userAccount);
	approveEvent.watch(function(err, result) {
		if (err) {
			console.log(err)
			return;
		}
		console.log("Approval Complete: " + result.args.value)
		// check that result.args._from is web3.eth.coinbase then
		// display result.args._value in the UI and call
		approveEvent.stopWatching()
	});
	web3.eth.getTransactionReceipt(hash, function (err, receipt) {
		if (err) {
			console.log(err);
			error(err);
		}
		if (receipt !== null) {
			// Transaction went through
			//console.log(receipt);
			document.getElementById('progress3').className = 'completed';
			document.getElementById('progress4').className = 'active';
			purchaseThatTicket(eventId,ticketTierId,purchaseTicketQty, purchaseTicketPayWithTokens,that);
			if (cb) {
				cb(receipt);
				//console.log(receipt);
				//console.log(cb);
				//console.log(that);
			}
		} else {
			// Try again in 1 second
			window.setTimeout(function () {
				waitForReceipt(eventId,ticketTierId,purchaseTicketQty, purchaseTicketPayWithTokens,hash,that,cb);
				console.log("Waiting to be mined...");
			}, 1000);
		}
	});
}
async function purchaseThatTicket(eventId,ticketTierId,purchaseTicketQty, purchaseTicketPayWithTokens,that){
	console.log("Purchase Ticket: " + eventId,ticketTierId,purchaseTicketQty, purchaseTicketPayWithTokens);
	promisify(cb => ticketContract.purchaseTicket(eventId,ticketTierId,purchaseTicketQty, purchaseTicketPayWithTokens,{from: web3.eth.accounts[0], gas:400000, value:0 , gasPrice:60000000000},cb))
	.then(function (txHash) {
		console.log('Transaction sent');
		console.dir(txHash);
		document.getElementById('progress4').className = 'completed';
		document.getElementById('progress5').className = 'active';
		waitForReceipt2(txHash,that);
	})
	.catch(console.error);
}
function waitForReceipt2(hash,that,cb) {
  console.log("Start Wait 2");
  var mintTicket = minterContract.Transfer({to: userAccount});
  console.log(mintTicket);
	mintTicket.watch(function(err, result) {
		if (err) {
			console.log(err)
			return;
    }
    console.log("RESULT",result);
		console.log("Ticket Purchased: " + result.args.tokenId)
		sendThatEmail(result.args.tokenId, that);
		// check that result.args._from is web3.eth.coinbase then
		// display result.args._value in the UI and call
		mintTicket.stopWatching()
	});
}
function sendThatEmail(ticketId,that){
	console.log("SEND?");
	var timesRun = 0;
		async function getDetails(ticketId,that, cb){
			var ticketDetails = await promisify(cb => ticketContract.getTicketDetails(ticketId,cb));
			//console.log(await ticketDetails[2]);
			var randTicketId = await ticketDetails[2];
			if (randTicketId > 0 && randTicketId !== undefined){
				//console.log("Do Stuff: " + randTicketId );
				//console.log("PLEASE " + randTicketId);
				that.ticket_number.value = String("" + randTicketId + ticketId);
				that.contact_number.value = Math.random() * 100000 | 0;
				console.log(that);
				emailjs.sendForm('mailgunDigiTix', 'digitix', that);
				console.log("Email Sent!");
				document.getElementById('progress5').className = 'completed';
				$('#modal-footer').html(`<p>Purchase completed - Email Sent. Would you like to buy another?</p><button type="button" class="btn btn-default" id="closeBtn">Purchase More</button><button type="button" class="btn btn-default"><a href="http://www.runfortheunicorns.com/">Finished</a></button>`);
				var modal = document.getElementById('myModal');
				var closeBtn = document.getElementById("closeBtn");
				closeBtn.onclick = function() {
			  	modal.style.display = "none";
				}
			} else {
				window.setTimeout(function () {
					timesRun += 1;
					//console.log("Waiting to be mined...");
					console.log("Waiting to be mined...");
					if(timesRun === 300){
							return "Transaction still processing, please visit DigiTix.io to get your ticket."
							window.clearTimeout();
					}
					getDetails(ticketId, that, cb);
				}, 1000);
			}
		}
		console.log("Ticket ID: " + ticketId);
		getDetails(ticketId, that);

	//  });

}
async function connectM(){
	if (window.ethereum) {
			window.web3 = new Web3(ethereum);
			try {
					// Request account access if needed
					await ethereum.enable();
					// Acccounts now exposed
					//web3.eth.sendTransaction({/* ... */});
					console.log("1?");
					//getTicketTiersToEvent(2, "eventDetailsTest");
					startApp();
			} catch (error) {
					// User denied account access...
			}
	}
	// Legacy dapp browsers...
	else if (window.web3) {
			window.web3 = new Web3(web3.currentProvider);
			// Acccounts always exposed
			//web3.eth.sendTransaction({/* ... */});
			//getTicketTiersToEvent(document.getElementById("buyTicket-Code").value, "eventDetailsTest");
			startApp();
	}
	// Non-dapp browsers...
	else {
			console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
	}
}
web3.version.getNetwork((err, netId) => {
	switch (netId) {
		case "1":
			console.log('This is mainnet')
			break
		case "2":
			console.log('This is the deprecated Morden test network.')
			break
		case "3":
			console.log('This is the ropsten test network.')
			break
		case "4":
			console.log('This is the Rinkeby test network.');
			break
		case "42":
			console.log('This is the Kovan test network.')
			break
		default:
			console.log('This is an unknown network.')
	}
});
function launchProgressBar(){
	// Get the modal
	var modal = document.getElementById('myModal');

	// Get the button that opens the modal
	//var btn = document.getElementById("myBtn");

	// Get the <span> element that closes the modal
	var span = document.getElementsByClassName("close")[0];
	// When the user clicks on <span> (x), close the modal
	span.onclick = function() {
		modal.style.display = "none";
	}

	// When the user clicks anywhere outside of the modal, close it
	window.onclick = function(event) {
		if (event.target == modal) {
			modal.style.display = "none";
		}
	}

	$("#myModalLabel").empty();
	$("#modal-body").empty();
	$('#modal-footer').empty();
	$("#myModalLabel").html(
		"Purchasing Ticket"
	);
	$("#modal-body").html(
		`<ul class="progress-indicator">
								<li id="progress1" class="completed">
										<span class="bubble"></span>
										Step 1. <br><small>Request<br> Ticket</small>
								</li>
								<li id="progress2" class="bubble">
										<span class="bubble"></span>
										Step 2. <br><small>Approve<br> Tokens</small>
								</li>
								<li id="progress3" class="bubble">
										<span class="bubble"></span>
										Step 3. <br><small>Approve<br> Complete</small>
								</li>
								<li id="progress4">
										<span class="bubble"></span>
										Step 4. <br><small>Confirm<br> Purchase</small>
								</li>
								<li id="progress5">
										<span class="bubble"></span>
										Step 5. <br><small>Purchase<br> Complete</small>
								</li>
						</ul>`
	);
	$('#modal-footer').html(
		`<img src="https://theartofeducation.edu/content/themes/artofed/img/loader.gif" width="50" height="50" class="close">` +
		`<button type="button" class="btn btn-default" id="closeBtn">Close</button>`
		)
	//$("#basicModal").modal("show");
	var closeBtn = document.getElementById("closeBtn");
	closeBtn.onclick = function() {
  	modal.style.display = "none";
	}
	modal.style.display = "block";
	// When the user clicks the button, open the modal

}


///////
async function approveTokens(){
  await connectM();
  if(userAccount == null){
    alert('Please connect wallet first.');
    document.getElementById('tokensApproved').checked = false;
    return
  }
  $("#toastWrapper").html("");
  //await tokenContractAddress.methods.approve(contractAddress,erc20Balance).send({from:userAccount})
  await promisify(cb => tokenContract.approve(contractAddress,"25000000000000",cb))
  .catch(console.error)
  .once('transactionHash', function(hash){
    console.log("Hash: " +hash );
    // $("#toastWrapper").append(`<div class="toast card" role="alert" aria-live="assertive" aria-atomic="true" data-autohide="false"style="min-width: 250px;" id="approveTokensSubmit">
    //   <div class="toast-header card-header" >
    //     <img src="assets/images/logo-icon.png" style="width:20px;height:20px"class="rounded mr-2" alt="...">
    //     <strong class="mr-auto">RenPool</strong>
    //     <small class="" style="color:white">just now</small>
    //     <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close" style="color:white !important">
    //       <span aria-hidden="true">&times;</span>
    //     </button>
    //   </div>
    //   <div class="toast-body">
    //     <b>Transaction Submitted</b><br>Approving Tokens...
    //   </div>
    // </div>`);
    // $("#approveTokensSubmit").toast("show");
  })
  .once('receipt', function(receipt){ console.log("Receipt: " +receipt ) })
  .on('confirmation', function(confNumber, receipt){ console.log("Confirmation#: " + confNumber + " Receipt: "+ receipt) })
  .on('error', function(error){
    console.log("Error: " + error);
  //   $("#toastWrapper").append(`<div class="toast card" role="alert" aria-live="assertive" aria-atomic="true" data-autohide="false"style="min-width: 250px;" id="errorTokensApprove">
  //   <div class="toast-header card-header" >
  //     <img src="assets/images/logo-icon.png" style="width:20px;height:20px"class="rounded mr-2" alt="...">
  //     <strong class="mr-auto">RenPool</strong>
  //     <small class="" style="color:white">just now</small>
  //       <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close" style="color:white !important">
  //       <span aria-hidden="true">&times;</span>
  //     </button>
  //   </div>
  //   <div class="toast-body">
  //     <b>Transaction Failed</b><br>Failed to approve tokens.
  //   </div>
  // </div>`);
  // $("#errorTokensApprove").toast("show");

 })
  .then(function(receipt){
    console.log("COMPLETE: " + receipt);
    // $("#toastWrapper").append(`<div class="toast card" role="alert" aria-live="assertive" aria-atomic="true" data-autohide="false"style="min-width: 250px;" id="approvedTokens">
    //   <div class="toast-header card-header" >
    //     <img src="assets/images/logo-icon.png" style="width:20px;height:20px"class="rounded mr-2" alt="...">
    //     <strong class="mr-auto">RenPool</strong>
    //     <small class="" style="color:white">just now</small>
    //     <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close" style="color:white !important">
    //       <span aria-hidden="true">&times;</span>
    //     </button>
    //   </div>
    //   <div class="toast-body">
    //     <b>Transaction Complete</b><br>Tokens have been approved.
    //   </div>
    // </div>`);
    // $("#approvedTokens").toast("show");
    document.getElementById('tokensApproved').checked = true;
  });
}
async function purchaseTicket(eventId, ticketTierId, ticketCost,that){
  await connectM();
  console.log("Purchase Ticket");
	console.log(eventId, ticketTierId, ticketCost);
	console.log("purchaseTicket" + eventId + ticketTierId);
	that.img_string.value = unicorns[ticketTierId][0];
	that.ticket_name.value = unicorns[ticketTierId][1];
  console.log("Give me the string: " + unicorns[ticketTierId]);

  var purchaseTicketPayWithTokens = 1;
  var purchaseTicketQty = 1;



  purchaseTicketPayWithTokens = true;
  var fee = await promisify(cb => ticketContract.viewTokenFees(cb));
  var decimals = await promisify(cb => tokenContract.decimals(cb));
  console.log("DECIMALS",decimals);
  console.log("FeePrice " + fee[0] + " TokenPrice " + ticketCost);
  var feeCost = fee[0]*1
  console.log("Fee Price: " + feeCost);
  tokenCost = (ticketCost * 1)*Math.pow(10, decimals);
  console.log("TokenPrice: " + tokenCost)
  tokenCost = await math.add(math.bignumber(feeCost), math.bignumber(tokenCost));
  console.log("FinalPrice: " + tokenCost);
  tokenCost = tokenCost *1;
  that.ticket_cost.value = Math.round(tokenCost / Math.pow(10, 8));

  if(userAccount == null){
    alert('Please connect wallet first.');
    return
  }
  await promisify(cb => tokenContract.allowance(userAccount,contractAddress,cb))
    .then(function (result){
      console.log(result);
      if(result > 0){
        promisify(cb => ticketContract.purchaseTicket(eventId,ticketTierId,purchaseTicketQty, purchaseTicketPayWithTokens,{from: web3.eth.accounts[0], gas:400000, value:0 , gasPrice:60000000000},cb))
        .catch(console.error)
      //   .once('transactionHash', function(hash){
      //     console.log("Hash: " +hash );
      //   })
      //   .once('receipt', function(receipt){ console.log("Receipt: " +receipt ) })
      //   .on('confirmation', function(confNumber, receipt){ console.log("Confirmation#: " + confNumber + " Receipt: "+ receipt) })
      //   .on('error', function(error){
      //     console.log("Error: " + error);
      // })
        .then(function(receipt){
          console.log("COMPLETE: " + receipt);
          waitForReceipt2(receipt,that);
        });
      } else{
        alert("Please approve tokens first.");
      }
    })
  //await tokenContractAddress.methods.approve(contractAddress,erc20Balance).send({from:userAccount})

}

